openapi: 3.0.0
info:
  title: Modified Acapy Agent
  version: v1
  description: description
  contact:
    email: email@email.email
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
    
servers:
- url: http://localhost:8150/
  description: test
  
paths: 
  /vs/exchange:
    description: Query a verifiable service ExchangeRecord list. Containing data about agent to agent exchange of service
    
    get:
      tags:
        - "Verifiable Services"
      summary: Query a list of verifiable service exchange records
      parameters:
        - $ref: "#/components/parameters/ServiceExchangeRecordFilter"
                
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceExchangeRecordResponse"
  /vs/exchange/{record_id}:
    description: Query a verifiable service by ID
    
    get:
      tags:
        - "Verifiable Services"
      summary: Query a service exchange record by id
      parameters:
        - in: path
          name: record_id
          schema:
            type: string
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceExchangeRecord"
  /vs/add:
    description: a
    
    post:
      tags:
        - "Verifiable Services"
      summary: Define a new service
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceAdd"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceExchangeRecord"
  /vs/apply:
    description: a
    post:
      tags:
        - "Verifiable Services"
      summary: Define a new service
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceApply"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceExchangeRecord"
  /vs/process-application:
    post:
      tags:
        - "Verifiable Services"
      summary: Decide whether to reject or accept an incoming service application
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessApplication"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceExchangeRecord"
      
  /pds/settings:
    description: Set the configuration of multiple pds instances or one pds instance, if pds doesn't exists create pds instances
    post:
      tags:
        - "Personal Data Storage"
      summary: Set the configuration of pds instances and/or create pds instances
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PDSSettingsExample"
                
      responses:
        200:
          description: OK
         
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PDSSettingsExample"
    get:
      tags:
          - "Personal Data Storage"
      summary: Query settings of all currently setup PDS
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PDSGetSettingsSchemaResponse"
      
      
  /pds/save:
    description: Save a record using active Personal Data Storage
    post:
      tags:
        - "Personal Data Storage"
      summary: Save a record using active PDS
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Payload"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DRIResponse"
  /pds/activate:
    description: PDS Plugin is a state machine in which state is the PDS type. When you are saving something, you are saving to the active PDS.
    post:
      tags:
        - "Personal Data Storage"
      summary: Choose a PDS for all the saving operations
      parameters:
        - $ref: "#/components/parameters/PDSType"
        - $ref: "#/components/parameters/PDSInstanceName"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DRIResponse"
  /pds/get/from:
    description: Ask other agent to share data he has in his PDS
    post:
      tags:
        - "Personal Data Storage"
      summary: Ask other agent to share data he has in his PDS
      parameters:
        - $ref: "#/components/parameters/PayloadID"
        - $ref: "#/components/parameters/ConnectionID"
      responses:
        200:
          description: OK
  /pds:
    description: a
    get:
      tags:
        - "Personal Data Storage"
      summary: Get all registered PDSes and current active PDS
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PDSResponse"
  /pds/{payload_id}:
    description: a
    get:
      tags:
        - "Personal Data Storage"
      parameters:
        - in: path
          name: payload_id
          schema:
            type: string
          required: true
          description: ID of data in PDS
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payload"
        404:
          description: Record not found
  /pds/current/:
    description: a
    get: 
      tags:
        - "Personal Data Storage"
      parameters:
        - in: query
          name: oca_schema_dris
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
    post:
      tags:
        - "Personal Data Storage"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PDSPostCurrent"
      responses:
        200:
          description: OK
  /vs/consent/:
    post:
      tags:
        - "Verifiable Services"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DefineConsent"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Consent"
    get:
      tags:
        - "Verifiable Services"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Consent"
  /vs/consent-given/:
    get:
      tags:
        - "Verifiable Services"
      parameters:
        - in: query
          name: connection_id
          schema: 
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Consent"
  /vs/request-service-list/{connection_id}:
    get:
      tags:
        - "Verifiable Services"
      parameters:
        - in: path
          name: connection_id
          required: True
          schema: 
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestServiceList"
  /vs/services:
    get:
      tags:
        - "Verifiable Services"
      parameters:
        - in: query
          name: connection_id
          description: leave blank if you want to see your services
          schema: 
            type: string
        - in: query
          name: service_id
          description: query a single, specific record
          schema: 
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Service"
                      
      

components:
  parameters:
    PDSType:
      in: query
      name: type
      schema: 
        type: string
    PDSInstanceName:
      in: query
      name: optional_name
      schema:
        type: string
    PayloadID:
      in: query
      name: payload_id
      required: true
      schema:
        type: string
    ConnectionID:
      in: query
      name: connection_id
      required: true
      schema:
        type: string
    ServiceExchangeRecordFilter:
      in: query
      name: filter
      content:
        application/json:
          schema:
            type: object
            properties:
              label:
                type: string
                default: "delete all fields you wont need in your query!"
              connection_id:
                type: string
              author:
                type: string
              service_id:
                type: string
              exchange_id: 
                type: string
              state: 
                type: string
  schemas:
    ServiceExchangeRecord:
      required:
        - label
        - service_id
      properties:
        label:
          type: string
        service_id:
          type: string
    ServiceExchangeRecordResponse:
      required:
        - result
      properties:
        result:
          type: array
          items:
            $ref: "#/components/schemas/ServiceExchangeRecord"
    PDSSettingsExample:
      properties:
        client_id: 
          type: string
          default: "1321wrf1g3f1412rsrfer"
        client_secret:
          type: string
          default: "12341551513qw42as"
        optional_instance_name:
          type: string
          default: "default"
        grant_type:
          type: string
          default: "client_credentials"
    PDSGetSettingsSchemaResponse:
      properties:
        pds_name_1:
          $ref: "#/components/schemas/PDSSettingsExample"
        pds_name_2:
          type: object
    PDSResponse:
      required:
        - active_pds
        - types
      properties:
        active_pds: 
          type: string
          default: "local, default"
        types:
          type: array
          items:
            type: object
            properties:
              local:
                $ref: "#/components/schemas/OCASchema"
              pds_name:
                $ref: "#/components/schemas/OCASchema"
    PDSPostCurrent:
      required: 
        - data
      properties:
        data:
          type: object
          properties:
            511f1t10iomj01tyf:
              type: object
            okm12-0goi2mj3oig:
              type: object
    ServiceAdd:
      required:
        - label
        - service_schema
        - consent_id
      properties:
        label:
          type: string
        service_schema:
          $ref: "#/components/schemas/OCASchema"
        consent_id:
          type: string
    ServiceApply:
      required:
        - user_data
        - connection_id
        - service_id
      properties:
        user_data:
          type: string
        connection_id:
          type: string
        service_id:
          type: string
    DefineConsent:
      allOf:
        - $ref: "#/components/schemas/OCAData"
        - type: object
          required:
            - label
          properties:
            label: 
              type: string
    Consent:
      allOf:
        - $ref: "#/components/schemas/DefineConsent"
        - type: object
          required:
            - consent_id
          properties:
            consent_id: 
              type: string      
      
    ProcessApplication:
      required:
        - exchange_record_id
        - decision
      properties:
        exchange_record_id:
          type: string
        decision:
          type: string
    Service:
      required:
        - service_id
        - label
      properties:
        service_id:
          type: string
        label:
          type: string
    RequestServiceList:
      required:
        - result
      properties:
        result:
          type: string
          default: "request sent, expect webhook notification"
    OCAData:
      required:
        - oca_schema_namespace
        - oca_schema_dri
        - oca_data
      properties:
        oca_schema_namespace:
          type: string
          default: "pds"
        oca_schema_dri:
          type: string
          default: "9bABtmHu628Ss4oHmyTU5gy7QB1VftngewTmh7wdmN1j"
        oca_data:
          type: object
    OCASchema:
      required:
        - oca_schema_namespace
        - oca_schema_dri
      properties:
        oca_schema_namespace:
          type: string
          default: "pds"
        oca_schema_dri:
          type: string
          default: "9bABtmHu628Ss4oHmyTU5gy7QB1VftngewTmh7wdmN1j"
    Payload:
      required:
        - payload
      properties:
        payload:
          type: string
    DRIResponse:
      required:
        - dri
      properties:
        dri:
          type: string
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
              
