openapi: 3.0.0
info:
  title: Modified Acapy Agent
  version: v1
  description: description
  contact:
    email: email@email.email
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
    
servers:
- url: http://localhost:8150/
  description: test
  
paths: 
  /vs/exchange:
    description: Query a verifiable service ExchangeRecord list. Containing data about agent to agent exchange of service
    
    get:
      tags:
        - "Verifiable Services"
      summary: Query a list of verifiable service exchange records
      parameters:
        - $ref: "#/components/parameters/ServiceExchangeRecordFilter"
                
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceExchangeRecordResponse"
  /vs/exchange/{record_id}:
    description: Query a verifiable service by ID
    
    get:
      tags:
        - "Verifiable Services"
      summary: Query a service exchange record by id
      parameters:
        - in: path
          name: record_id
          schema:
            type: string
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceExchangeRecord"
  /vs/add:
    post:
      tags:
        - "Verifiable Services"
      summary: Define a new service
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceAdd"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceExchangeRecord"
  /vs/apply:
    post:
      tags:
        - "Verifiable Services"
      summary: Apply to other agent's service
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceApply"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceExchangeRecord"
  /vs/process-application:
    post:
      tags:
        - "Verifiable Services"
      summary: Decide whether to reject or accept an incoming service application
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessApplication"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceExchangeRecord"
      
  /pds/settings:
    description: Set the configuration of multiple pds instances or one pds instance, if pds doesn't exists create pds instances
    post:
      tags:
        - "Personal Data Storage"
      summary: Set the configuration of pds instances and/or create pds instances
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ArrayOfPDSSettings"
                
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfPDSSettings"
    get:
      tags:
          - "Personal Data Storage"
      summary: Query settings of all currently setup PDSes
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfPDSSettings"
  /pds/activate:
    description: PDS Plugin is a state machine in which state is the PDS type. When you are saving something, you are saving to the active PDS.
    post:
      tags:
        - "Personal Data Storage"
      summary: Choose a PDS for all the saving operations
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PDSActivate"
      responses:
        200:
          description: OK
  # /pds/from:
  #   description: Ask other agent to share data he has in his PDS
  #   post:
  #     tags:
  #       - "Personal Data Storage"
  #     summary: Ask other agent to share data he has in his PDS
  #     parameters:
  #       - $ref: "#/components/parameters/PayloadID"
  #       - $ref: "#/components/parameters/ConnectionID"
  #     responses:
  #       200:
  #         description: OK
  /pds:
    description: Get all registered PDSes and current active PDS
    get:
      tags:
        - "Personal Data Storage"
      summary: Get all registered PDSes and current active PDS
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PDSResponse"
  /pds/oca-schema-chunks:
    description: Retrieve data in bulk 
    get: 
      summary: Retrieve data in bulk 
      tags:
        - "Personal Data Storage"
      parameters:
        - in: query
          name: oca_schema_dris
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
    post:
      summary: Post data in bulk
      tags:
        - "Personal Data Storage"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PDSPostChunks"
      responses:
        200:
          description: OK
  /vs/consent:
    post:
      summary: Define a new consent
      tags:
        - "Verifiable Services"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Consent"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Consent"
    get:
      summary: Retrieve all defined consents
      tags:
        - "Verifiable Services"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Consent"
  /vs/consent-given:
    get:
      summary: Retrieve all consents givent to other agent's
      tags:
        - "Verifiable Services"
      parameters:
        - in: query
          name: connection_id
          schema: 
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Consent"
  /vs/request-service-list/{connection_id}:
    get:
      summary: Request a service list from other agent
      tags:
        - "Verifiable Services"
      parameters:
        - in: path
          name: connection_id
          required: True
          schema: 
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestServiceList"
  /vs/services:
    get:
      summary: Retrieve all defined services
      tags:
        - "Verifiable Services"
      parameters:
        - in: query
          name: connection_id
          description: leave blank if you want to see your services
          schema: 
            type: string
        - in: query
          name: service_id
          description: query a single, specific record
          schema: 
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Service"
                      
      

components:
  parameters:
    PDSDriver:
      in: query
      name: driver
      schema: 
        type: string
    PDSInstanceName:
      in: query
      name: optional_name
      schema:
        type: string
    PayloadID:
      in: query
      name: payload_id
      required: true
      schema:
        type: string
    ConnectionID:
      in: query
      name: connection_id
      required: true
      schema:
        type: string
    ServiceExchangeRecordFilter:
      in: query
      name: filter
      content:
        application/json:
          schema:
            type: object
            properties:
              label:
                type: string
              connection_id:
                type: string
              author:
                type: string
              service_id:
                type: string
              exchange_id: 
                type: string
              state: 
                type: string
  schemas:
    PDSActivate:
      required:
        - instance_name
        - driver
      properties:
        instance_name:
          type: string
        driver: 
          type: string
          enum: [own_your_data, local, thcf_data_vault]
    ServiceExchangeRecord:
      required:
        - label
        - service_id
      properties:
        exchange_id:
          type: string
        service_user_data_dri:
          type: string
        author:
          type: string
        updated_at:
          type: string
        created_at:
          type: string
        connection_id:
          type: string
        state:
          type: string
        label:
          type: string
        service_id:
          type: string
        service_user_data:
          type: string
        consent:
          $ref: "#/components/schemas/ConsentSerialized"
        service:
          $ref: "#/components/schemas/OCAData"
    ServiceExchangeRecordResponse:
      required:
        - result
      properties:
        result:
          type: array
          items:
            $ref: "#/components/schemas/ServiceExchangeRecord"
    PDSSetting:
      required:
        - driver
        - client_id
        - client_secret
      properties:
        driver:
          type: object
          required:
            - name
          properties:
            name:
              type: string
              enum: [own_your_data, thcf_data_vault, local]
            thcf_data_vault:
              type: object
              required:
                - host
              properties:
                host:
                  type: string
                  description: Server URL
            own_your_data:
              type: object
              required:
                - scope
                - grant_type
              properties:
                scope:
                  type: string
                  enum: [admin, write, read]
                grant_type:
                  type: string
                  enum: [client_credentials]
        client_id: 
          type: string
        client_secret:
          type: string
        instance_name:
          type: string
        
    ArrayOfPDSSettings:
      type: array
      items:
        $ref: "#/components/schemas/PDSSetting"
    PDSResponse:
      required:
        - active
        - drivers
      properties:
        active: 
          type: string
        drivers:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              oca_schema_dri:
                type: string
    PDSPostChunks:
      required: 
        - data
      properties:
        data:
          type: object
          additionalProperties:
            type: object
            required:
              - t
              - p 
            properties:
              t:
                type: string
              p:
                additionalProperties: true
          example:
            "DRI:12152515": 
              t: o
              p:
                test: example
            "DRI:1asfaf2152515": 
              t: a
              p: 
                - test: example
                  
    ServiceAdd:
      required:
        - label
        - service_schema
        - consent_id
      properties:
        label:
          type: string
        service_schema:
          $ref: "#/components/schemas/OCASchema"
        consent_id:
          type: string
    ServiceApply:
      required:
        - user_data
        - connection_id
        - service_id
      properties:
        user_data:
          type: string
        connection_id:
          type: string
        service_id:
          type: string
    ConsentSerialized:
      allOf:
        - $ref: "#/components/schemas/OCADataSerialized"
        - type: object
          properties:
            usage_policy:
              type: string
    Consent:
      allOf:
        - $ref: "#/components/schemas/OCAData"
        - type: object
          required:
            - label
            - consent_id
          properties:
            label: 
              type: string
            consent_id: 
              type: string
    ProcessApplication:
      required:
        - exchange_record_id
        - decision
      properties:
        exchange_record_id:
          type: string
        decision:
          type: string
    Service:
      required:
        - service_id
        - label
      properties:
        service_id:
          type: string
        label:
          type: string
        updated_at:
          type: string
        created_at: 
          type: string
        service_schema:
          $ref: "#/components/schemas/OCASchema"
        consent_schema:
          $ref: "#/components/schemas/ConsentSerialized"
        
    RequestServiceList:
      required:
        - result
      properties:
        result:
          type: string
    OCAData:
      allOf:
        - $ref: "#/components/schemas/OCASchema"
        - type: object
          required:
            - oca_data_dri
          properties:
            oca_data_dri: 
              type: string
    OCADataSerialized:
      allOf:
        - $ref: "#/components/schemas/OCAData"
        - type: object
          required:
            - oca_data
          properties:
            oca_data: 
              type: object
              properties:
                test:
                  type: string
    OCASchema:
      required:
        - oca_schema_namespace
        - oca_schema_dri
      properties:
        oca_schema_namespace:
          type: string
        oca_schema_dri:
          type: string
    Payload:
      required:
        - payload
      properties:
        payload:
          type: string
    DRIResponse:
      required:
        - dri
      properties:
        dri:
          type: string
