openapi: 3.0.0
info:
  title: Modified Acapy Agent
  version: v1
  description: description
  contact:
    email: email@email.email
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
    
servers:
- url: http://localhost:8150/
  description: test
  
paths: 
  /applications/mine:
    get:
      tags:
        - "Service applications"
      summary: Queries for all pending applications that I have applied to
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfMineApplications"
  /applications/others:
    get:
      tags:
        - "Service applications"
      summary: Queries for all pending applications that others applied to
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfApplications"
  /applications/{appliance_uuid}/accept:
    put:
      tags:
        - "Service applications"
      parameters:
        - in: path
          name: appliance_uuid
          schema:
            type: string
            format: uuid
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Application"
  /applications/{appliance_uuid}/reject:
    put:
      tags:
        - "Service applications"
      parameters:
        - in: path
          name: appliance_uuid
          schema:
            type: string
            format: uuid
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Application"
  /pds/settings:
    post:
      description: Set the configuration of pds instance. If pds doesn't exist create pds instance.
      tags:
        - "Personal Data Storage"
      summary: Set the configuration of pds instances and/or create pds instances
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PDSSetting"
                
      responses:
        408: 
          description: PDS connection timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        200:
          description: OK
    get:
      tags:
          - "Personal Data Storage"
      summary: Query settings of all currently setup PDSes
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfPDSSettings"
  /pds/activate:
    description: PDS Plugin is a state machine in which state is the PDS type. When you are saving something, you are saving to the active PDS.
    post:
      tags:
        - "Personal Data Storage"
      summary: Choose a PDS for all the saving operations
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PDSActivate"
      responses:
        200:
          description: OK
        404:
          description: Instance not found
          
  /pds/active:
    description: Gets currently active driver instance.
    get:
      responses:
        200:
          description: Returns active driver instance.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PDSDriverInstance"
  /pds/drivers:
    description: Get all registered PDSes and current active PDS
    get:
      tags:
        - "Personal Data Storage"
      summary: Get all registered PDSes and current active PDS
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfPDSDrivers"
  /pds/oca-schema-chunks:
    description: Retrieve data in bulk 
    get: 
      summary: Retrieve data in bulk 
      tags:
        - "Personal Data Storage"
      parameters:
        - in: query
          name: oca_schema_dris
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfOCASchemaChunks"
    post:
      summary: Post data in bulk
      tags:
        - "Personal Data Storage"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ArrayOfOCASchemaChunks"
      responses:
        200:
          description: OK
  /consents:
    post:
      summary: Define a new consent
      tags:
        - "Consents"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Consent"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Consent"
    get:
      summary: Retrieve all defined consents
      tags:
        - "Consents"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfConsents"
  /consents/{consent_uuid}:
    delete:
      summary: Removes consent by its uuid
      tags:
        - "Consents"
      parameters:
        - in: path
          name: consent_uuid
          required: True
          schema: 
            type: string
      responses:
        200:
          description: OK
        404:
          description: Not found

  /connections/{connection_uuid}/services:
    get:
      summary: Request a service list from other agent
      tags:
        - "Services"
      parameters:
        - in: path
          name: connection_uuid
          required: True
          schema: 
            type: string
      responses:
        200:
          description: Response will come async, via websocket. Response will contain ArrayOfDefinedServices model.
  /services:
    get:
      summary: Retrieve all defined services
      tags:
        - "Services"
      parameters:
        - in: query
          name: connection_id
          description: leave blank if you want to see your services
          schema: 
            type: string
        - in: query
          name: service_id
          description: query a single, specific record
          schema: 
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfDefinedServices"
  /services/add:
    post:
      tags:
        - "Services"
      summary: Define a new service
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewService"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefinedService"
  /services/apply:
    post:
      tags:
        - "Services"
      summary: Apply to other agent's service
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewApplication"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MineApplication"
  /services/{service_uuid}:
    delete:
      summary: Removes service by its uuid
      tags:
        - "Services"
      parameters:
        - in: path
          name: service_uuid
          required: True
          schema: 
            type: string
      responses:
        200:
          description: OK
        404:
          description: Not found
                
  # /documents/consents-given:
  #   get:
  #     summary: Retrieve all consents givent to other agent's
  #     tags:
  #       - "Documents"
  #     responses:
  #       200:
  #         description: OK
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/ArrayOfDocuments"
 

components:
  parameters:
    StatusFilter:
      in: query
      name: filter
      content:
        application/json:
          schema:
            type: object
            properties:
              connection_uuid:
                type: string
                format: uuid
              author:
                type: string
                enum: [self, other]
              service_uuid:
                type: string
                format: uuid
              state: 
                type: string
                enum: [pending]
  schemas:
    PDSActivate:
      required:
        - instance_name
        - driver
      properties:
        instance_name:
          type: string
        driver: 
          type: string
          enum: [own_your_data_data_vault, own_your_data_sem_con, thcf_data_vault, local]
    NewApplication:
      required:
        - user_data
        - service_uuid
      properties:
        user_data:
          type: object
          additionalProperties:
            type: string
        service_uuid:
          type: string
    Application:
      required:
        - appliance_uuid
        - connection_uuid
        - updated_at
        - created_at
        - service_uuid
        - consent
        - service
      properties:
        appliance_uuid:
          type: string
        updated_at:
          type: string
        created_at:
          type: string
        connection_uuid:
          type: string
        service_uuid:
          type: string
        consent:
          $ref: "#/components/schemas/OCASchemaDRIDataTuple"
        service:
          $ref: "#/components/schemas/OCASchema"
    ArrayOfApplications:
      type: array
      items:
        $ref: "#/components/schemas/Application"
    MineApplication:
      allOf:
        - $ref: '#/components/schemas/Application'
        - type: object
          required:
            - service_user_data
          properties:
            service_user_data:
              type: string
              description: JSON serialized service application data
    ArrayOfMineApplications:
        type: array
        items:
          $ref: "#/components/schemas/MineApplication"
    PDSSetting:
      required:
        - driver
      properties:
        driver:
          type: object
          required:
            - name
          properties:
            name:
              type: string
              enum: [own_your_data_data_vault, own_your_data_sem_con, thcf_data_vault, local]
            thcf_data_vault:
              type: object
              required:
                - host
              properties:
                host:
                  type: string
                  description: Server URL
            own_your_data_data_vault:
              type: object
              required:
                - grant_type
              properties:
                grant_type:
                  type: string
                  enum: [client_credentials]
            own_your_data_sem_con:
              type: object
              required:
                - grant_type
                - scope
              properties:
                scope:
                  type: string
                  enum: [admin, write, read]
                grant_type:
                  type: string
                  enum: [client_credentials]
            local:
              type: object
              properties:
                test:
                  type: string
        client_id: 
          type: string
        client_secret:
          type: string
        instance_name:
          type: string
    ArrayOfPDSDrivers:
      type: array
      items:
        $ref: "#/components/schemas/PDSDriver"
    ArrayOfPDSSettings:
      type: array
      items:
        $ref: "#/components/schemas/PDSSetting"
    PDSDriver:
      type: "object"
      properties:
        name:
          type: string
          enum: [own_your_data_data_vault, own_your_data_sem_con, thcf_data_vault, local]
        oca_schema_dri:
          type: string
    PDSDriverInstance:
      type: "object"
      properties:
        instance_name: 
          type: string
        driver:
          $ref: "#/components/schemas/PDSDriver"
    ArrayOfOCASchemaChunks:
      type: array
      items:
        $ref: "#/components/schemas/OCASchemaChunk"
    OCASchemaChunk:
      required: 
        - dri
        - payload
      properties:
        dri:
          type: string
        payload:
          type: array
          items:
            type: object
            additionalProperties:
              type: string
    ArrayOfConsents:
      type: array
      items:
        $ref: "#/components/schemas/Consent"
    Consent:
      allOf:
        - $ref: "#/components/schemas/OCASchemaDRIDataTuple"
        - type: object
          required:
            - label
            - consent_uuid
          properties:
            label: 
              type: string
            consent_uuid: 
              type: string
              nullable: true
    ArrayOfDefinedServices:
      type: array
      items:
        $ref: "#/components/schemas/DefinedService"
    NewService:
      allOf:
        - $ref: "#/components/schemas/Service"
        - type: object
          required:
            - consent_uuid
          properties:
            consent_uuid: 
              type: string
              format: uuid
    DefinedService:
      allOf:
        - $ref: "#/components/schemas/Service"
        - type: object
          required:
            - consent
          properties:
            consent:
              $ref: "#/components/schemas/OCASchemaDRIDataTuple"
    Service:
      required:
        - label
        - service_schema_dri
        - consent
        - uuid
      properties:
        uuid: 
          type: string
          format: uuid
        label:
          type: string
        updated_at:
          type: string
          nullable: true
        created_at: 
          type: string
          nullable: true
        service_schema_dri:
          description: "OCA Schema DRI"
          type: string
    OCASchemaDRIDataTuple:
      allOf:
        - $ref: "#/components/schemas/OCASchema"
        - type: object
          required:
            - oca_data
          properties:
            oca_data: 
              type: object
              additionalProperties:
                type: string
    OCASchema:
      required:
        - oca_schema_dri
      properties:
        oca_schema_dri:
          type: string
    Payload:
      required:
        - payload
      properties:
        payload:
          type: string
    DRIResponse:
      required:
        - dri
      properties:
        dri:
          type: string
    Error:
      type: "object"
      properties:
        message:
          type: "string"
        code:
          type: "string"
        payload:
          type: "array"
          items:
            type: "string"
